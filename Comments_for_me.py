

def test_greeting():
    """
    Напишите программу, которая выводит на экран приветствие.
    """
    name = "Анна"
    age = 25
    # TODO Сформируйте нужную строку

    # Решение

    # output = "Привет, " + name + "! Тебе " + str(age) + " лет."

    # str(age) преобразует число в строку

    # output = f"Привет, {name}! Тебе {25} лет."

    # Что такое f-строка в Python?
    # F-строка (форматированная строковая литерал) — это способ создания строк в Python, который позволяет встраивать переменные и выражения прямо в текст с помощью фигурных скобок {}.
    # Она начинается с префикса f или F перед кавычками.

    #output = "Привет, {}! Тебе {} лет.".format(name, age)

    # Как работает метод .format() в Python?
    # .format() — это метод строки, который подставляет значения в указанные места. Он работает по схеме:
    # "Текст {место1} текст {место2}".format(значение1, значение2)

    # Проверяем результат
    assert output == "Привет, Анна! Тебе 25 лет."


def test_rectangle():
    """
    Напишите программу, которая берет длину и ширину прямоугольника
    и считает его периметр и площадь.
    """
    a = 10
    b = 20
    # TODO сосчитайте периметр
    # Расчет периметра (формула: P = 2*(a+b))
    perimeter = 2*(a+b)

    assert perimeter == 60

    # TODO сосчитайте площадь
    # Расчет площади (формула: S=a*b)
    area = a*b

    assert area == 200


def test_circle():
    """
    Напишите программу, которая берет радиус круга и выводит на экран его длину и площадь.
    Используйте константу PI
    """

    r = 23
    # TODO сосчитайте площадь
    # Расчет площади круга (S = π * r²)
    area = math.pi * r ** 2

    assert round == 1661.9025137490005

    # TODO сосчитайте длину окружности
    # Расчет длины окружности (C = 2 * π * r)
    length = 2 * math.pi * r

    assert round == 144.51326206513048


def test_random_list():
    """
    Создайте список из 10 случайных чисел от 1 до 100 (включая обе границы) и отсортируйте его по возрастанию.
    """
    # TODO создайте список
    # l = [random.randint(1, 100) for i in range(10)] # В Python символ _ (нижнее подчёркивание) в цикле for _ in range() — это общепринятое соглашение, которое означает: «Эта переменная не используется в теле цикла».
    l = [9,8,1,2,3,4,5,6,7,100]
    l.sort()
    assert len(l) == 10
    assert all(l[i] <= l[i + 1] for i in range(len(l) - 1))


def test_unique_elements():
    """
    Удалите из списка все повторяющиеся элементы
    """
    l = [1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 8, 9, 10, 10]
    # TODO удалите повторяющиеся элементы

    l = list(dict.fromkeys(l))
    # Как это помогает удалить дубликаты из списка?
    # Когда вы передаёте список в dict.fromkeys(), происходит следующее:
    # Как работает dict.fromkeys(keys, value)?
    # Параметры:

    # keys — последовательность (список, кортеж, строка и т.д.), которая станет ключами словаря.
    # value (опционально) — значение для всех ключей. По умолчанию None.
    # Возвращает:
    #
    # Новый словарь, где каждый элемент из keys становится ключом с указанным значением.
    # Все дубликаты автоматически удаляются (так как ключи словаря уникальны).
    # Порядок ключей сохраняется (начиная с Python 3.7+ порядок в словарях гарантирован).

    assert isinstance(l, list)
    assert len(l) == 10
    assert l == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]


def test_dicts():
    """
    Создайте словарь из двух списков.
    Используйте первый список как ключи, а второй - как значения.
    Подсказка: используйте встроенную функцию zip.
    """

    # Как это работает:
    # zip(first, second) создает итератор, который объединяет элементы из обоих списков попарно:
    #
    # list(zip(first, second))  # [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)]
    # dict() преобразует эти пары в словарь, где первый элемент каждой пары становится ключом, а второй — значением.


    first = ["a", "b", "c", "d", "e"]
    second = [1, 2, 3, 4, 5]
    # TODO создайте словарь

    d = dict(zip(first, second))

    assert isinstance(d, dict)
    assert len(d) == 5
    assert list(d.keys()) == first
    assert list(d.values()) == second
